show dbs; -> to show the databases.

use <database-name>; -> to use the given database.

db.dropDatabase(); -> to delete the database.

show collections; -> to get all the collections.

db.createCollection(<collection-name>); -> to create a new collection.

db.<collection-name>.drop(); -> to delete the collection.

db.<collection-name>.insertOne({}) || db.insertOne({}) -> to insert the key value pair in database;

db.<collection-name>.insertMany([{}, {}, {}]) || db.insertMany([{}, {}, {}]) -> to insert the multiple key value pair in database;

db.<collection-name>.find() -> to get all the contents in the collection.

db.<collection-name>.insertMany([{}, {}, {ordered: false}]) -> add all the correct data except the wrong one.

db.<collection-name>.find().limit(n) -> show the n number of datas only.

db.<collection-name>.find({"key": "value"}) -> only show the data with the given key value pair.

db.<collection-name>.findOne({"key": "value"}) -> only show one data with the given key value pair.

// For importing the different files in mongodb

mongoimport jsonfile.json -d database_name -c collection_name

mongoimport products.json -d shop -c products

mongoimport products.json -d shop -c products --jsonArray

// Comparison operator 

db.<collection_name>.find({"key": {$eq: "value"}}) -> $eq is the equal to operator and show the same key value pair.

db.<collection_name>.find({"key": {$eq: "value"}}).count() -> give the total number of data present there. 

db.<collection_name>.find({"key": {$ne: "value"}}) -> $ne: is not equal, show other than given key pair value

db.<collection_name>.find({"key": {$gt: "value"}}) -> $gt: greater than

db.<collection_name>.find({"key": {$gte: "value"}}) -> $gte: greater than equal to

db.<collection_name>.find({"key": {$lt: "value"}}) -> $lt: less than

db.<collection_name>.find({"key": {$lte: "value"}}) -> $lte: less than equal to

db.<collection_name>.find({"key": {$in: [69, 99, 129]}}) -> $in: in operator, show the data including all the key value pair in the array

db.<collection_name>.find({"key": {$nin: [69, 99, 129]}}) -> $nin: not equal to

// Cursor methods

sort() -> for the sorting of the data
limit() -> limiting the number of data shown
count() -> give the number of data present
skip() -> sort on the basis of given data

db.<collection_name>.find({'price': {$gt: 300}}).sort({'price': 1}) -> show the data in ascending order

db.<collection_name>.find({'price': {$gt: 300}}).sort({'price': -1}) -> show the data in descending order

// Logical operator

$and -> and operator
$or -> or operator
$not -> not operator
$nor -> nor operator

db.<collection_name>.find({$and: [{'price': {$gt: 200}}, {'name': 'Diamond Ring'}]}) -> example of and operator, give the data in which the price is greater than 200 and name is Diamond ring

// Complex expression

$expr -> complex expression

db.<collection_name>.find({$expr: {$gt: ['$price', 1340]}})

db.<collection_name>.find({$expr: {$gt: [{$multiply: ['quantity', 'price']}, '$targetPrice']}}) -> give the data in which the multiply of price and quantity is greater than target price

// Element operator

$exitst
$type
$size

db.<collecion_name>.find({price: {$exists: true}}) -> to give the data in which price exists

db.<collection_name>.find({price: {$type: 'number'}}) -> give the data in which the type of number field is string.

db.<collection_name>.find({'comments': {$size: 4}}) -> give the data in which the size of key pair value is 4.

// Projection

db.<collection_name>.find({'comments': {$size: 2}}, {$comments: 1, _id: 0}) -> it will give data only with comment and hide _id field, but this is an exception.

// Embedded documents

db.<collection_name>.find({'comments.user':'Lily}) -> it will give those comments whose user is lily.

db.<collection_name>.find({'metadata.views: {$gt: 2000}}) -> give the data in which the views in metadata is greater than 2000.

$all operator

db.<collection_name>.find({'comments.user': {$all: ['Alice', 'Vinod']}}) -> gives the data in which the comments user is both Alice and Vinod

$elemMatch operator

db.<collection_name>.find({'comments': {$elemMatch: {'user': 'Vinod', 'text': 'Thanks for sharing.'}}}) -> give the data in which the comments has user Vinod and the text is Thanks for Sharing.

or db.<collection_name>.find({'comments.user': 'Vinod', 'comments.text': 'Thanks for sharing.'})

// updating operation in MongoDB

// updateOne

db.<collection_name>.updateOne({_id: ObjectId('364378348t4yfy4t')}, {$set: {price: 450}}) -> it will update the price of the given objectId to 450.

db.<collection_name>.updateOne({name: 'Designer Handbag'}, {$set: {isFeatured: false}}) -> it will update the isFeatured false whose name is Designer handbag.

//updateMany

db.<collection_name>.updateMany({price: 120}, {$set: {'isFeatured': true}}) -> update all the documents whose price is 120, and update the isFeatured to true.

// Removing and Renaming field.

db.<collection_name>.updateMany/One({filter}, {$unset: {fieldName: 1}}) -> remove the given fieldName from the data

db.<collection_name>.updateMany({price: 123}, {$rename: {isFeatured: 'isFeature'}}) -> rename the field isFeatured to isFeature whose price is 123 in the given data.

// Updating array and embedded documents

db.<collection_name>.updateOne({_id: 5}, {$set: {'user': 'jessy'}}) -> add the new field called user: jessy in the document having _id: 5

db.<collection_name>.updateOne({_id: 5}, {$unset: {'user': 1}}) -> remove the field called user having _id: 5

db.<collection_name>.updateOne({_id: 5}, {$push: {comments: {user: 'Eva', text: 'Subscribe to my channel'}}}) -> add pr push the new object with the user and text in the comment section of the data.

db.<collection_name>.updateOne({_id: 5}, {$pop: {'comments': 1}}) -> remove the last object from the comment section from the data

db.<collection_name>.updateOne({_id: 7, 'comments.user': 'Alice'}, {$set: {'comments.$.text': 'Awesome Alice'}}) -> will the change the text of the user called ALice in the comments part of the data

// Delete operation in MongoDB

db.<collection_name>.deleteOne({_id: 1}) -> delete the whole document having the _id: 1

db.<collection_name>.updateOne({_id: 6}, {$unset: {'metadata': 1}}) -> remove the metadata section from the whole _id: 6 data

db.<collection_name>.deleteMany({price: 55}) -> delete all the data having price 55

db.<collection_name>.find({price: {$gt: 300}}).explain() -> give every details of the query, data, database and many more...

db.<collection_name>.find({price: {$gt: 300}}).explain("executionStats") -> give the execution time to the query and many more ...

db.<collection_name>.explain('executionStats').find({"name": "Air Fryer"}) -> find name having value Air Fryer

// Managing indexes

db.<collection_name>.createIndex({"name": 1})

// After creating index of name and run this command
db.<collection_name>.explain('executionStats').find({"name": "Air Fryer"}) -> it will not scan every file unlike it scan every file.

db.<collection_name>.dropIndex({"name": 1}) -> remove the index

db.<collection_name>.createIndex({email: 1}, {unique: true}) -> make the given field unique, not duplicate entry

db.<collection_name>.createIndex({field: "text"})

db.<collection_name>.find({$text: {$search: "keyword"}}) -> searching using index is faster than $regex search

db.<collection_name>.find({field: {$regex: "air"}})

// Aggregate

Definition:- Aggregation is the process of performing transformation on documents and combining them to produce computed result
Pipeline Stages:- Aggregations consists of multiple pipeline stages, each performing a specific operation on the input data.

Benefits:- 
  Aggregating data:- complex calculations and operations are possible.
  Advanced Transformations:- Data can be combined, reshape and computed for insights.
  Efficient processing:- Aggregations can handle large database efficiently.

db.<colletion_name>.aggregate([{$match: {'name': 'Sleek Wooden Tuna'}}]) -> give the name having sleek wooden tuna

db.<colletion_name>.aggregate([{$match: {price: {$gt: 1350}}}])

// $group:- The $group stage groups documents by specified fields and performs aggregate operations on grouped data.

db.<collection_name>.aggregate([{$group: {_id: "company", totalProducts: {$sum: 1}}}]) -> will group the company having same value and also give the total number of products

db.<collecion_name>.aggregate([{$match: {company: '64c23350e32f4a51b19b9247'}}]) -> will give the data having the given the company name

db.<collecion_name>.aggregate([{$group: {_id: "$company", totalProducts: {$sum: "$price"}}}])

db.<collecion_name>.aggregate([{$match: {price: {$gt: 900}}},{$group: {_id: "$company",totalProducts: {$sum: "$price"}}}]) -> giving the sum of the totalProducts which price is greater than 900

db.<collecion_name>.aggregate([{$match: {quantity: 5}},{$group: {_id: '$quantity',priceTotal: {$sum: '$price'},priceAvg: {$avg: '$price'}}}]) -> give the data having quantity 5 and also give the sum of the price and avg of all the price

db.<collecion_name>.aggregate([{$match: {price: {$gt: 1200}}}, {$group: {_id: "$category", totalPrice: {$sum: "$price"}}}, {$sort: {totalPrice: -1}}]) -> sort the result 

db.<collecion_name>.aggregate([{$project: {price: 1, _id: 0}}]) -> show the price and remove the _id section from the data

db.<collecion_name>.aggregate([{$match: {price: {$gt: 1200}}},{$project: {price: 1, discountPrice: {$multiply: ['$price', 0.8]}}}]) -> will generate the discountPrice from the given price in the data.

// $push -> The $push stage adds elements to an array field within documents
// $unwind -> The $unwind stage deconstructs an array field and produces multiple documents.

db.<collecion_name>.aggregate([{$match: {price: {$gt: 1200}}},{$group: {_id: '$price',allColors: {$push: '$colors'}}}]) -> push the colors in the field but made the array inside an array

db.products.aggregate([{$unwind: "$colors"}, {$match: {price: {$gt: 1200}}}, {$group: {_id: '$price', allColors: {$push: '$colors'}}}]) -> destructure the array of the colors field

db.products.aggregate([{$unwind: "$colors"}, {$match: {price: {$gt: 1200}}}, {$group: {_id: '$price', allColors: {$addToSet: '$colors'}}}]) -> remove the duplicate field from the color array

db.products.aggregate([{$match: {price: {$gt: 1200}}}, {$unwind: '$colors'}, {$group: {_id: {priceGroup: "$price"}, colors: {$addToSet: "$colors"},},}, {$project: {_id: 1, colors: 1, colcolorLength: {$size: "$colors"}, }}])

db.products.aggregate([{$match: {price: {$gt: 1200}}}, {$unwind: '$colors'}, {$group: {_id: {priceGroup: "$price"}, colors: {$addToSet: "$colors"},},}, {$project: {_id: 1, colors: 1, colorLength: {$size: "$colors"}, }}, {$limit: 1}]) -> $limit will set the limit, how many data will be shown

db.products.aggregate([{$match: {price: {$gt: 1200}}}, {$unwind: '$colors'}, {$group: {_id: {priceGroup: "$price"}, colors: {$addToSet: "$colors"},},}, {$project: {_id: 1, colors: 1, colorLength: {$size: "$colors"}, }}, {$skip: 1}]) -> will skip the given number of the data in the database

db.cols.aggregate([{$project: {name: 1, value: {$filter: {input: '$values', as: 'val', cond: {$gt: ['$$val', 30]}}}}}]) -> give the element of arrays more than 30 of value section.